#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define a structure for the stack
struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

// Function to create a stack
struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push a character onto the stack
void push(struct Stack* stack, char item) {
    stack->array[++stack->top] = item;
}

// Function to pop a character from the stack
char pop(struct Stack* stack) {
    return stack->array[stack->top--];
}

// Function to check if a given string is a palindrome
int isPalindrome(char* str) {
    // Get the length of the string
    int length = strlen(str);

    // Create a stack
    struct Stack* stack = createStack(length);

    // Push the first half of the string onto the stack
    for (int i = 0; i < length / 2; i++) {
        push(stack, str[i]);
    }

    // Compare the second half of the string with the elements popped from the stack
    for (int i = (length + 1) / 2; i < length; i++) {
        if (str[i] != pop(stack)) {
            // If characters don't match, it's not a palindrome
            free(stack->array);
            free(stack);
            return 0; // Not a palindrome
        }
    }

    // If all characters match, it's a palindrome
    free(stack->array);
    free(stack);
    return 1; // Palindrome
}

int main() {
    char str[100];

    // Get input from the user
    printf("Enter a string: ");
    scanf("%s", str);

    // Check if the string is a palindrome
    if (isPalindrome(str)) {
        printf("%s is a palindrome.\n", str);
    } else {
        printf("%s is not a palindrome.\n", str);
    }

    return 0;
}
